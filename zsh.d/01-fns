# -*- sh -*-

psg () { 
  ps="ps -ef"
  [ $OS = "Darwin" ] && ps="ps jax"
  eval $ps | grep -i $1 | grep -v grep
}

screen_running () {
  [[ -n $STY ]]
}

tmux_running () {
  [[ -n $TMUX ]]
}

not_in_emacs () {
  [[ ! -n $EMACS ]]
}

tun () {
  ssh -NCf -R 10000:localhost:22 valve
}

killtun () {
  pkill -f '10000:localhost:22'
}

sshs () {
  h=$1
  if tmux_running; then
    tmux neww -n $h "exec ssh $h"
  elif screen_running; then
    screen -t $h exec ssh $h
  else
    ssh $h
  fi
}

gitcb () {
  b=$1
  git checkout -b $(basename $b) $b
}

update_auth_sock () {
  if [[ -n $TMUX ]]; then
    TMUX_SOCK=$(echo $TMUX|cut -d , -f 1)
    NEW_SSH_AUTH_SOCK=$(tmux -S $TMUX_SOCK showenv|grep ^SSH_AUTH_SOCK|cut -d = -f 2)
    if [[ -n $NEW_SSH_AUTH_SOCK ]] && [[ -S $NEW_SSH_AUTH_SOCK ]]; then
      SSH_AUTH_SOCK=$NEW_SSH_AUTH_SOCK
    fi
  fi
}
preexec_functions+=update_auth_sock

enumerate_huh () {
  # This *should* be the same as the following function.  But it
  # doesn't work right.
  awk -v a=$1 -v b=$2 \
    'BEGIN{c=1};{printf("host %s%02d.%s\n  hostname %s\n\n", $a, c++, $b, $1)}'
}

enumerate_ssh () {
  sort | awk -v pat="host $1%02d.$2\n  hostname %s\n\n" \
    'BEGIN{c=1};{printf(pat, c++, $1)}'
}

s3cfg () {
  l=~/.s3cfg
  targ=~/.s3cfg-$1
  if [[ -e $targ ]]; then
    [[ -e $l ]] && rm $l
    ln -s $targ $l
  else
    basename `readlink ~/.s3cfg` | sed 's/.s3cfg-\(.*\)/\1/'
  fi
}

chef-me () {
  export OPSCODE_USER=sonian_developer
  . ~/.rvm/scripts/rvm && rvm use 1.9.2
}

knife-delete () {
  knife node delete $*
  knife client delete $*
  knife ec2 server delete $*
}

lset () {
  profile=$1
  if [[ -z $profile ]]; then
    echo $LEDGER_FILE
  else
    LEDGER_FILE=~/etc/ledger/${profile}.dat
  fi
}

l () {
  if [[ $TERM == "dumb" ]]; then
    ledger $* | cat
  else
    ledger $*
  fi
}

snapdir () {
  dirname="`basename \"\`pwd\`\"`"
  snapdir="../${dirname}-`date +%Y%m%d%H%M%S`"

  mkdir "$snapdir"
  tar cf - . | ( cd ${snapdir}; tar xf - )
}

